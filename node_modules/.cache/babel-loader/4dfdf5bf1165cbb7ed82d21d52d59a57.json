{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useSpring, animated } from 'react-spring';\nimport styles from \"./SpringImage.scss\";\n\nvar calc = function calc(x, y) {\n  return [-(y - window.innerHeight / 2) / 20, (x - window.innerWidth / 2) / 20, 1.1];\n};\n\nvar trans = function trans(x, y, s) {\n  return \"perspective(600px) rotateX(\".concat(x, \"deg) rotateY(\").concat(y, \"deg) scale(\").concat(s, \")\");\n};\n\nfunction SpringImage(props) {\n  var className = props.className,\n      image_url = props.image_url;\n\n  var _useSpring = useSpring(function () {\n    return {\n      xys: [0, 0, 1],\n      config: {\n        mass: 2,\n        tension: 50,\n        friction: 40\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      dimensions = _useSpring2[0],\n      set = _useSpring2[1];\n\n  var image_styles = {\n    backgroundImage: \"url(\".concat(image_url, \")\"),\n    transform: dimensions.xys.interpolate(trans)\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames(styles('container'), props.className)\n  }, /*#__PURE__*/React.createElement(animated.div, {\n    className: styles('card'),\n    onMouseMove: function onMouseMove(_ref) {\n      var x = _ref.clientX,\n          y = _ref.clientY;\n      return set({\n        xys: calc(x, y)\n      });\n    },\n    onMouseLeave: function onMouseLeave() {\n      return set({\n        xys: [0, 0, 1]\n      });\n    },\n    style: image_styles\n  }));\n}\n\nSpringImage.propTypes = {\n  className: PropTypes.string,\n  image_url: PropTypes.string\n};\nexport default SpringImage;","map":{"version":3,"sources":["/Users/reuters/Engineering/Julia-Portfolio-Next/components/springimage/SpringImage.jsx"],"names":["React","PropTypes","classnames","useSpring","animated","styles","calc","x","y","window","innerHeight","innerWidth","trans","s","SpringImage","props","className","image_url","xys","config","mass","tension","friction","dimensions","set","image_styles","backgroundImage","transform","interpolate","clientX","clientY","propTypes","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AACA,OAAOC,MAAP;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAU,CAAC,EAAEA,CAAC,GAAGC,MAAM,CAACC,WAAP,GAAqB,CAA3B,IAAgC,EAAjC,EAAqC,CAACH,CAAC,GAAGE,MAAM,CAACE,UAAP,GAAoB,CAAzB,IAA8B,EAAnE,EAAuE,GAAvE,CAAV;AAAA,CAAb;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACL,CAAD,EAAIC,CAAJ,EAAOK,CAAP;AAAA,8CAA2CN,CAA3C,0BAA4DC,CAA5D,wBAA2EK,CAA3E;AAAA,CAAd;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,MAE1BC,SAF0B,GAIvBD,KAJuB,CAE1BC,SAF0B;AAAA,MAG1BC,SAH0B,GAIvBF,KAJuB,CAG1BE,SAH0B;;AAAA,mBAMDd,SAAS,CAAC;AAAA,WAAO;AAAEe,MAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP;AAAkBC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,OAAO,EAAE,EAApB;AAAwBC,QAAAA,QAAQ,EAAE;AAAlC;AAA1B,KAAP;AAAA,GAAD,CANR;AAAA;AAAA,MAMpBC,UANoB;AAAA,MAMRC,GANQ;;AAQ3B,MAAMC,YAAY,GAAG;AACpBC,IAAAA,eAAe,gBAAST,SAAT,MADK;AAEpBU,IAAAA,SAAS,EAAEJ,UAAU,CAACL,GAAX,CAAeU,WAAf,CAA2BhB,KAA3B;AAFS,GAArB;AAIA,sBACC;AAAK,IAAA,SAAS,EAAEV,UAAU,CAACG,MAAM,CAAC,WAAD,CAAP,EAAsBU,KAAK,CAACC,SAA5B;AAA1B,kBACC,oBAAC,QAAD,CAAU,GAAV;AACC,IAAA,SAAS,EAAEX,MAAM,CAAC,MAAD,CADlB;AAEC,IAAA,WAAW,EAAE;AAAA,UAAYE,CAAZ,QAAGsB,OAAH;AAAA,UAAwBrB,CAAxB,QAAesB,OAAf;AAAA,aAAgCN,GAAG,CAAC;AAAEN,QAAAA,GAAG,EAAEZ,IAAI,CAACC,CAAD,EAAIC,CAAJ;AAAX,OAAD,CAAnC;AAAA,KAFd;AAGC,IAAA,YAAY,EAAE;AAAA,aAAMgB,GAAG,CAAC;AAAEN,QAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAP,OAAD,CAAT;AAAA,KAHf;AAIC,IAAA,KAAK,EAAEO;AAJR,IADD,CADD;AAUA;;AAEDX,WAAW,CAACiB,SAAZ,GAAwB;AACvBf,EAAAA,SAAS,EAAEf,SAAS,CAAC+B,MADE;AAEvBf,EAAAA,SAAS,EAAEhB,SAAS,CAAC+B;AAFE,CAAxB;AAKA,eAAelB,WAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useSpring, animated } from 'react-spring';\nimport styles from './SpringImage.scss';\n\nconst calc = (x, y) => [-(y - window.innerHeight / 2) / 20, (x - window.innerWidth / 2) / 20, 1.1];\nconst trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\nfunction SpringImage(props) {\n\tconst {\n\t\tclassName,\n\t\timage_url\n\t} = props;\n\n\tconst [dimensions, set] = useSpring(() => ({ xys: [0, 0, 1], config: { mass: 2, tension: 50, friction: 40 } }));\n\n\tconst image_styles = {\n\t\tbackgroundImage: `url(${image_url})`,\n\t\ttransform: dimensions.xys.interpolate(trans)\n\t}\n\treturn (\n\t\t<div className={classnames(styles('container'), props.className)}>\n\t\t\t<animated.div\n\t\t\t\tclassName={styles('card')}\n\t\t\t\tonMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\n\t\t\t\tonMouseLeave={() => set({ xys: [0, 0, 1] })}\n\t\t\t\tstyle={image_styles}\n\t\t    />\n\t\t</div>\n\t);\t\n}\n\nSpringImage.propTypes = {\n\tclassName: PropTypes.string,\n\timage_url: PropTypes.string\n};\n\nexport default SpringImage;\n"]},"metadata":{},"sourceType":"module"}