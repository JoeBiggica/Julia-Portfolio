{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useState, useRef } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport styles from \"./SpringImage.scss\";\n\nvar calc = function calc(x, y) {\n  return [-(y - window.innerHeight / 2) / 20, (x - window.innerWidth / 2) / 20, 1.1];\n};\n\nvar trans = function trans(x, y, s) {\n  return \"perspective(600px) rotateX(\".concat(x, \"deg) rotateY(\").concat(y, \"deg) scale(\").concat(s, \")\");\n};\n\nfunction SpringImage(props) {\n  var className = props.className,\n      image_url = props.image_url;\n  var ref = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isHovered = _useState2[0],\n      setHovered = _useState2[1];\n\n  var _useSpring = useSpring(function () {\n    return {\n      // Array containing [rotateX, rotateY, and scale] values.\n      // We store under a single key (xys) instead of separate keys ...\n      // ... so that we can use animatedProps.xys.interpolate() to ...\n      // ... easily generate the css transform value below.\n      xys: [0, 0, 1],\n      // Setup physics\n      config: {\n        mass: 10,\n        tension: 400,\n        friction: 40,\n        precision: 0.00001\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      animatedProps = _useSpring2[0],\n      setAnimatedProps = _useSpring2[1];\n\n  var image_styles = {\n    backgroundImage: \"url(\".concat(image_url, \")\")\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames(styles('container'), props.className)\n  }, /*#__PURE__*/React.createElement(animated.div, {\n    ref: ref,\n    className: styles('card'),\n    onMouseEnter: function onMouseEnter() {\n      return setHovered(true);\n    },\n    onMouseMove: function onMouseMove(_ref) {\n      var clientX = _ref.clientX,\n          clientY = _ref.clientY;\n      // Get mouse x position within card\n      var x = clientX - (ref.current.offsetLeft - (window.scrollX || window.pageXOffset || document.body.scrollLeft)); // Get mouse y position within card\n\n      var y = clientY - (ref.current.offsetTop - (window.scrollY || window.pageYOffset || document.body.scrollTop)); // Set animated values based on mouse position and card dimensions\n\n      var dampen = 50; // Lower the number the less rotation\n\n      var xys = [-(y - ref.current.clientHeight / 2) / dampen, // rotateX\n      (x - ref.current.clientWidth / 2) / dampen, // rotateY\n      1.07 // Scale\n      ]; // Update values to animate to\n\n      setAnimatedProps({\n        xys: xys\n      });\n    },\n    onMouseLeave: function onMouseLeave() {\n      setHovered(false); // Set xys back to original\n\n      setAnimatedProps({\n        xys: [0, 0, 1]\n      });\n    },\n    style: _objectSpread({\n      // If hovered we want it to overlap other cards when it scales up\n      zIndex: isHovered ? 2 : 1,\n      // Interpolate function to handle css changes\n      transform: animatedProps.xys.interpolate(function (x, y, s) {\n        return \"perspective(600px) rotateX(\".concat(x, \"deg) rotateY(\").concat(y, \"deg) scale(\").concat(s, \")\");\n      })\n    }, image_styles)\n  }));\n}\n\nSpringImage.propTypes = {\n  className: PropTypes.string,\n  image_url: PropTypes.string\n};\nexport default SpringImage;","map":{"version":3,"sources":["/Users/reuters/Engineering/Julia-Portfolio-Next/components/springimage/SpringImage.jsx"],"names":["PropTypes","classnames","useState","useRef","useSpring","animated","styles","calc","x","y","window","innerHeight","innerWidth","trans","s","SpringImage","props","className","image_url","ref","isHovered","setHovered","xys","config","mass","tension","friction","precision","animatedProps","setAnimatedProps","image_styles","backgroundImage","clientX","clientY","current","offsetLeft","scrollX","pageXOffset","document","body","scrollLeft","offsetTop","scrollY","pageYOffset","scrollTop","dampen","clientHeight","clientWidth","zIndex","transform","interpolate","propTypes","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useState, useRef } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport styles from './SpringImage.scss';\n\nconst calc = (x, y) => [-(y - window.innerHeight / 2) / 20, (x - window.innerWidth / 2) / 20, 1.1];\nconst trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\nfunction SpringImage(props) {\n\tconst {\n\t\tclassName,\n\t\timage_url\n\t} = props;\n\n\tconst ref = useRef();\n\n\tconst [isHovered, setHovered] = useState(false);\n\n\tconst [animatedProps, setAnimatedProps] = useSpring(() => {\n\t    return {\n\t\t\t// Array containing [rotateX, rotateY, and scale] values.\n\t\t\t// We store under a single key (xys) instead of separate keys ...\n\t\t\t// ... so that we can use animatedProps.xys.interpolate() to ...\n\t\t\t// ... easily generate the css transform value below.\n\t\t\txys: [0, 0, 1],\n\t\t\t// Setup physics\n\t\t\tconfig: { mass: 10, tension: 400, friction: 40, precision: 0.00001 }\n\t    }\n\t  });\n\n\n\tconst image_styles = {\n\t\tbackgroundImage: `url(${image_url})`,\n\t}\n\treturn (\n\t\t<div className={classnames(styles('container'), props.className)}>\n\t\t\t<animated.div\n\t\t\t\tref={ref}\n\t\t\t\tclassName={styles('card')}\n\t\t\t\tonMouseEnter={() => setHovered(true)}\n\t\t\t\tonMouseMove={({ clientX, clientY }) => {\n\t\t\t\t\t// Get mouse x position within card\n\t\t\t\t\tconst x =\n\t\t\t\t\tclientX -\n\t\t\t\t\t(ref.current.offsetLeft -\n\t\t\t\t\t(window.scrollX || window.pageXOffset || document.body.scrollLeft));\n\n\t\t\t\t\t// Get mouse y position within card\n\t\t\t\t\tconst y =\n\t\t\t\t\tclientY -\n\t\t\t\t\t(ref.current.offsetTop -\n\t\t\t\t\t(window.scrollY || window.pageYOffset || document.body.scrollTop));\n\n\t\t\t\t\t// Set animated values based on mouse position and card dimensions\n\t\t\t\t\tconst dampen = 50; // Lower the number the less rotation\n\t\t\t\t\tconst xys = [\n\t\t\t\t\t\t-(y - ref.current.clientHeight / 2) / dampen, // rotateX\n\t\t\t\t\t\t(x - ref.current.clientWidth / 2) / dampen, // rotateY\n\t\t\t\t\t\t1.07 // Scale\n\t\t\t\t\t];\n\n\t\t\t\t\t// Update values to animate to\n\t\t\t\t\tsetAnimatedProps({ xys: xys });\n\t\t\t\t}}\n\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\tsetHovered(false);\n\t\t\t\t\t// Set xys back to original\n\t\t\t\t\tsetAnimatedProps({ xys: [0, 0, 1] });\n\t\t\t\t}}\n\t\t\t\tstyle={{\n\t\t\t\t\t// If hovered we want it to overlap other cards when it scales up\n\t\t\t\t\tzIndex: isHovered ? 2 : 1,\n\t\t\t\t\t// Interpolate function to handle css changes\n\t\t\t\t\ttransform: animatedProps.xys.interpolate(\n\t\t\t\t\t\t(x, y, s) =>\n\t\t\t\t\t\t`perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\n\t\t\t\t\t),\n\t\t\t\t\t...image_styles\n\t\t\t\t}}\n\t\t\t>\n\t\t\t</animated.div>\n\t\t</div>\n\t);\t\n}\n\nSpringImage.propTypes = {\n\tclassName: PropTypes.string,\n\timage_url: PropTypes.string\n};\n\nexport default SpringImage;\n"]},"metadata":{},"sourceType":"module"}