{"version":3,"file":"static/webpack/static/development/pages/Index.js.d768c096d52be56ba5c8.hot-update.js","sources":["webpack:///./components/springimage/SpringImage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useState, useRef } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport styles from './SpringImage.scss';\n\nconst calc = (x, y) => [-(y - window.innerHeight / 2) / 20, (x - window.innerWidth / 2) / 20, 1.1];\nconst trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\nfunction SpringImage(props) {\n\tconst {\n\t\tclassName,\n\t\timage_url\n\t} = props;\n\n\tconst ref = useRef();\n\n\tconst [isHovered, setHovered] = useState(false);\n\n\tconst [animatedProps, setAnimatedProps] = useSpring(() => {\n\t    return {\n\t\t\t// Array containing [rotateX, rotateY, and scale] values.\n\t\t\t// We store under a single key (xys) instead of separate keys ...\n\t\t\t// ... so that we can use animatedProps.xys.interpolate() to ...\n\t\t\t// ... easily generate the css transform value below.\n\t\t\txys: [0, 0, 1],\n\t\t\t// Setup physics\n\t\t\tconfig: { mass: 10, tension: 400, friction: 40, precision: 0.00001 }\n\t    }\n\t  });\n\n\n\tconst image_styles = {\n\t\tbackgroundImage: `url(${image_url})`,\n\t\ttransform: dimensions.xys.interpolate(trans)\n\t}\n\treturn (\n\t\t<div className={classnames(styles('container'), props.className)}>\n\t\t\t<animated.div\n\t\t\t\tref={ref}\n\t\t\t\tclassName={styles('card')}\n\t\t\t\tonMouseEnter={() => setHovered(true)}\n\t\t\t\tonMouseMove={({ clientX, clientY }) => {\n\t\t\t\t\t// Get mouse x position within card\n\t\t\t\t\tconst x =\n\t\t\t\t\tclientX -\n\t\t\t\t\t(ref.current.offsetLeft -\n\t\t\t\t\t(window.scrollX || window.pageXOffset || document.body.scrollLeft));\n\n\t\t\t\t\t// Get mouse y position within card\n\t\t\t\t\tconst y =\n\t\t\t\t\tclientY -\n\t\t\t\t\t(ref.current.offsetTop -\n\t\t\t\t\t(window.scrollY || window.pageYOffset || document.body.scrollTop));\n\n\t\t\t\t\t// Set animated values based on mouse position and card dimensions\n\t\t\t\t\tconst dampen = 50; // Lower the number the less rotation\n\t\t\t\t\tconst xys = [\n\t\t\t\t\t\t-(y - ref.current.clientHeight / 2) / dampen, // rotateX\n\t\t\t\t\t\t(x - ref.current.clientWidth / 2) / dampen, // rotateY\n\t\t\t\t\t\t1.07 // Scale\n\t\t\t\t\t];\n\n\t\t\t\t\t// Update values to animate to\n\t\t\t\t\tsetAnimatedProps({ xys: xys });\n\t\t\t\t}}\n\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\tsetHovered(false);\n\t\t\t\t\t// Set xys back to original\n\t\t\t\t\tsetAnimatedProps({ xys: [0, 0, 1] });\n\t\t\t\t}}\n\t\t\t\tstyle={{\n\t\t\t\t\t// If hovered we want it to overlap other cards when it scales up\n\t\t\t\t\tzIndex: isHovered ? 2 : 1,\n\t\t\t\t\t// Interpolate function to handle css changes\n\t\t\t\t\ttransform: animatedProps.xys.interpolate(\n\t\t\t\t\t\t(x, y, s) =>\n\t\t\t\t\t\t`perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\n\t\t\t\t\t),\n\t\t\t\t\t...image_styles\n\t\t\t\t}}\n\t\t\t>\n\t\t\t</animated.div>\n\t\t</div>\n\t);\t\n}\n\nSpringImage.propTypes = {\n\tclassName: PropTypes.string,\n\timage_url: PropTypes.string\n};\n\nexport default SpringImage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AASA;AApBA;AAAA;AAAA;AACA;AAsBA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AAAA;AAEA;AACA;AAHA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AAjCA;AA+CA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}